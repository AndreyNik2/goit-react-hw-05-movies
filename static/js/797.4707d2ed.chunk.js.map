{"version":3,"file":"static/js/797.4707d2ed.chunk.js","mappings":"2TAiBS,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,6GAAmCC,EAAnC,+BAA0C,EACzCC,EAAMC,EAAAA,GAAAA,SAAgBA,EAAAA,GAAAA,mBAC1BC,EAA4B,CAAEC,OAAQ,CAAEC,QAASC,EAAAA,GAASN,KAAMA,IAF7D,kBAIoBO,EAAAA,EAAAA,IAAUN,EAAKE,GAJnC,cAIGK,EAJH,yBAKIA,EAASC,MALb,gCAOHC,QAAQC,MAAR,MAPG,iFAWD,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kFACCZ,EAAMC,EAAAA,GAAAA,SAAgBA,EAAAA,GAAAA,2BAAkCW,EAC5DC,EAAc,CAAEV,OAAQ,CAAEC,QAASC,EAAAA,KAFhC,kBAIoBC,EAAAA,EAAAA,IAAUN,EAAKa,GAJnC,cAIGN,EAJH,yBAKIA,EAASC,MALb,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAyBF,GAAzB,kFACCZ,EADD,UACUC,EAAAA,GAAAA,SADV,iBACgCW,EADhC,YAEHC,EAAc,CAAEV,OAAQ,CAAEC,QAASC,EAAAA,KAFhC,kBAIoBC,EAAAA,EAAAA,IAAUN,EAAKa,GAJnC,cAIGN,EAJH,yBAKIA,EAASC,MALb,gCAOHC,QAAQC,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA2BH,GAA3B,gGAA+Bb,EAA/B,+BAAsC,EACrCC,EAAMC,EAAAA,GAAAA,SAAgBA,EAAAA,GAAAA,2BAAkCW,EAAKX,EAAAA,GAAAA,gBACjEY,EAAc,CAAEV,OAAQ,CAAEC,QAASC,EAAAA,GAASN,KAAMA,IAF/C,kBAIoBO,EAAAA,EAAAA,IAAUN,EAAKa,GAJnC,cAIGN,EAJH,yBAKIA,EAASC,MALb,gCAOHC,QAAQC,MAAR,MAPG,iFAWD,SAAeM,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,gGAAwClB,EAAxC,+BAA+C,EAE9CC,EAAMC,EAAAA,GAAAA,SAAgBA,EAAAA,GAAAA,gBAC1BiB,EAAe,CACbf,OAAQ,CACNC,QAASC,EAAAA,GACTN,KAAMA,EACNkB,MAAOA,EACPE,eAAe,IARhB,SAWoBb,EAAAA,EAAAA,IAAUN,EAAKkB,GAXnC,cAWGX,EAXH,yBAYIA,EAASC,MAZb,mE,gFC7DP,IAAMP,EAAO,CACXmB,SAAU,gCACVC,cAAe,WACfC,gBAAiB,mBACjBC,mBAAoB,qBACpBC,gBAAiB,eACjBC,eAAgB,kCAChBC,2BAA4B,SAC5BC,gBAAiB,YAGbtB,EAAU,kC,oLCVHuB,EAAY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC1B,OAEI,kBAAMC,SAAUD,EAAhB,WACE,mBAAQE,KAAK,SAAb,qBACA,kBACEA,KAAK,OACLC,KAAK,QACLC,UAAU,QACVC,YAAY,oBAKrB,E,gDCXYC,EAAOC,EAAAA,GAAAA,GAAH,wJAUJC,EAAWD,EAAAA,GAAAA,GAAH,2DAIRE,EAAMF,EAAAA,GAAAA,IAAH,gFAOHG,GAAUH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,qECpBPK,EAAkB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QACrCC,GAAWC,EAAAA,EAAAA,MACjB,OACE,UAACV,EAAD,YACE,SAAC,KAAD,CACEW,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,QAASC,QAAQX,KAElBC,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAIC,EAAvB,EAAuBA,YAAvB,OACX,SAACpB,EAAD,WACE,UAACE,EAAD,CAASmB,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMhB,GAArC,UACGa,IACC,SAACnB,EAAD,CACEuB,IAAK5D,EAAAA,GAAAA,eAAsBwD,EAC3BK,IAAKP,KAGT,eAAIP,MAAM,OAAV,SAAkBO,QARPC,EADJ,MAelB,EC9BYO,GAAa3B,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,sLC4DvB,EAvDoB,WAClB,IAAMQ,GAAWC,EAAAA,EAAAA,MACjB,GAA8BmB,EAAAA,EAAAA,UAAS,IAAvC,eAAOrB,EAAP,KAAgBsB,EAAhB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOtB,EAAP,KAAkBwB,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOnD,EAAP,KAAqBoD,EAArB,KACMrD,EAAQC,EAAaqD,IAAI,SACzBxE,EAAOmB,EAAaqD,IAAI,QAqC9B,OAxBAC,EAAAA,EAAAA,YAAU,WAAM,wCAMd,wGAEIN,GAAa,GAFjB,UAG2ClD,EAAAA,EAAAA,IAAkBC,EAAOlB,GAHpE,gBAGY4C,EAHZ,EAGYA,QAAS8B,EAHrB,EAGqBA,YACjBR,GAAW,SAAAS,GAAC,wBAAQA,IAAR,OAAc/B,GAAd,IACZyB,EAAcK,GACdP,GAAa,GACG,IAAZvB,GAAkBA,GACpBgC,EAAAA,GAAAA,MAAY,qCARlB,kDAWIlE,QAAQC,MAAR,MACAiE,EAAAA,GAAAA,MAAY,mDAZhB,2DANc,sBAET1D,GAA0B,IAAjBA,EAAM2D,QAFN,mCAqBdC,EACD,GAAE,CAAC9E,EAAMkB,KAGR,6BACE,SAAC,KAAD,CAAS6D,SAAS,eAClB,SAACf,EAAD,CAAYL,GAAG,IAAf,sBACA,SAAC9B,EAAD,CAAWC,aAvCM,SAAAkD,GACnBA,EAAMC,iBACNV,EAAgB,CAAErD,MAAO8D,EAAME,OAAOC,SAASjE,MAAMkE,MAAOpF,KAAM,IAClEkE,EAAW,GAEZ,KAmCG,SAACxB,EAAD,CAAiBC,UAAWA,EAAWC,QAASA,EAASgB,MAAO,CAACC,KAAMhB,KACtEuB,EAAa,IAAK,mBAAQiB,QAlCT,WACpBd,EAAgB,CAAErD,MAAOA,EAAOlB,KAAMsF,OAAOtF,GAAQ,GACtD,EAgCsB,yBAGxB,C","sources":["components/ApiService.js","components/config.js","components/pages/movieSearch/Searchbar.js","components/pages/movieSearch/SearchMovieList.styled.js","components/pages/movieSearch/SearchMovieList.js","components/pages/movieSearch/SearchMovie.styled.js","components/pages/movieSearch/SearchMovie.js"],"sourcesContent":["import axios from 'axios';\nimport { urls, API_KEY } from './config';\n\n\n\n\n  export async function fetchGenres() {\n    const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n    try {\n      const response = await axios.get(url),\n        genres = response.data.genres;\n      return genres;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  export async function fetchTrendingMovies(page = 1) {\n    const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n      popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n    try {\n      const response = await axios.get(url, popularMoviesSearchParams);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n}\n  \n export async function fetchMovieById(ID) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchCast(ID) {\n   const url = `${urls.BASE_URL}movie/${ID}/credits`,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchReviuw(ID, page = 1) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID + urls.REVIEW_URL_PATH,\n     fetchParams = { params: { api_key: API_KEY, page: page } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \nexport async function fetchMoviesByName(query, page = 1) {\n    \n  const url = urls.BASE_URL + urls.SEARCH_PATH_URL,\n    searchParams = {\n      params: {\n        api_key: API_KEY,\n        page: page,\n        query: query,\n        include_adult: false,\n      },\n    };\n    const response = await axios.get(url, searchParams);\n    return response.data;\n  }\n\n\n\n// #moviesByNameSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//       query: '',\n//       page: 1,\n//       include_adult: false,\n//     },\n//   };\n\n//   #getMovieDetailsSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   get query() {\n//     return this.#moviesByNameSearchParams.params.query;\n//   }\n//   set query(newQuery) {\n//     this.#moviesByNameSearchParams.params.query = newQuery;\n//   }\n\n//   async fetchTrailer(id) {\n//     const url = `${urls.BASE_URL}${urls.GET_MOVIE_DETAILS_PATH_URL}${id}/videos?api_key=${API_KEY}`;\n//     try {\n//       const { data } = await axios.get(url);\n//       return data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getGenres () {\n//     const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n//     try {\n//       const response = await axios.get(url),\n//         genres = response.data.genres;\n//       return genres;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchTrendingMovies(page = 1) {\n//     const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n//       popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n//     try {\n//       const response = await axios.get(url, popularMoviesSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchMoviesByName() {\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     try {\n//       const response = await axios.get(url, this.#moviesByNameSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getMoviesByName(query, page = 1) {\n//     this.#moviesByNameSearchParams.params.query = query;\n//     this.#moviesByNameSearchParams.params.page = page;\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     const response = await axios.get(url, this.#moviesByNameSearchParams);\n//     return response.data;\n//   }\n\n//   async fetchMoviesByID(id) {\n//     const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + id;\n//     try {\n//       const response = await axios.get(url, this.#getMovieDetailsSearchParams);\n//       return response.data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   catch(error) {\n//     console.error(error);\n//   }","const urls = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  CAST_PATH_URL: '/credits',\n  GENRES_PATH_URL: 'genre/movie/list',\n  TRENDINGS_PATH_URL: 'trending/movie/day',\n  SEARCH_PATH_URL: 'search/movie',\n  BASE_IMAGE_URL: 'https://image.tmdb.org/t/p/w500',\n  GET_MOVIE_DETAILS_PATH_URL: 'movie/',\n  REVIEW_URL_PATH: '/reviews',\n};\n\nconst API_KEY = '4e55e991eb56041fecba3fbc73e3250b';\n\nconst NOTIFY_UNCORRECT_SEARCH =\n  'Search result is unsuccessful. Enter the correct movie name and try again!';\n\nexport { urls, API_KEY, NOTIFY_UNCORRECT_SEARCH };\n","\nexport const Searchbar = ({ handleSubmit }) => {\n  return (\n    \n      <form onSubmit={handleSubmit}>\n        <button type=\"submit\">Search</button>\n        <input\n          type=\"text\"\n          name=\"query\"\n          className=\"input\"\n          placeholder=\"Search movies\"\n        ></input>\n      </form>\n    \n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n\nexport const List = styled.ul`\n  display: flex;\n  width: 1200px;\n  margin: 0 auto;\n  padding: 15px;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  width: calc((100% - 60px) / 3);\n`;\n\nexport const Img = styled.img`\n  max-width: 100%;\n  &:hover {\n    scale: 1.05;\n  }\n`;\n\nexport const ImgLink = styled(Link)`\n  text-decoration: none;\n  color: #ffffff;\n`;\n","import { urls } from 'components/config';\nimport { useLocation } from 'react-router-dom';\nimport { Circles } from 'react-loader-spinner';\nimport { List, ListItem, Img, ImgLink } from './SearchMovieList.styled';\n\nexport const SearchMovieList = ({ isLoading, results }) => {\n  const location = useLocation();\n  return (\n    <List>\n      <Circles\n        height=\"100\"\n        width=\"100\"\n        color=\"#641cf4\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={Boolean(isLoading)}\n      />\n      {results.map(({ original_title, id, poster_path }) => (\n        <ListItem key={id}>\n          <ImgLink to={`${id}`} state={{ from: location }}>\n            {poster_path && (\n              <Img\n                src={urls.BASE_IMAGE_URL + poster_path}\n                alt={original_title}\n              />\n            )}\n            <h2 color=\"#fff\">{original_title}</h2>\n          </ImgLink>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: inline-block;\n  text-decoration: none;\n  color: #ffffff;\n  margin: 15px;\n  padding: 5px;\n  border: 1px solid #ffffff;\n  border-radius: 3px;\n`;\n","import { useLocation, useSearchParams } from 'react-router-dom';\nimport React, { useEffect, useState} from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Searchbar } from './Searchbar';\nimport { fetchMoviesByName } from 'components/ApiService';\nimport { SearchMovieList } from './SearchMovieList';\nimport { StyledLink } from './SearchMovie.styled';\n\nconst MovieSearch = () => {\n  const location = useLocation();\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [totalPages, setTotalPages] = useState(0);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const page = searchParams.get('page');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchParams({ query: event.target.elements.query.value, page: 1 });\n    setResults([]);\n    // event.target.reset();\n  };\n\n  const incrementPage = () => {\n    setSearchParams({ query: query, page: Number(page) + 1 });\n  };\n\n  useEffect(() => {\n    \n    if (!query || query.length === 0) {\n      return;\n    }\n\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const { results, total_pages } = await fetchMoviesByName(query, page);\n        setResults(p => [...p, ...results]);\n        setTotalPages(total_pages);\n        setIsLoading(false);\n        if (results === 0 || !results) {\n          toast.error('Nothing found for your request :(');\n        }\n      } catch (error) {\n        console.error(error);\n        toast.error('Something went wrong :( Try reloading the page.');\n      }\n    }\n    fetchData();\n  }, [page, query]);\n\n  return (\n    <main>\n      <Toaster position=\"top-right\" />\n      <StyledLink to=\"/\">Go back</StyledLink>\n      <Searchbar handleSubmit={handleSubmit} />\n      <SearchMovieList isLoading={isLoading} results={results} state={{from: location}} />\n      {totalPages > 1 && <button onClick={incrementPage}>Load more</button>}\n    </main>\n  );\n};\n\nexport default MovieSearch;\n"],"names":["fetchTrendingMovies","page","url","urls","popularMoviesSearchParams","params","api_key","API_KEY","axios","response","data","console","error","fetchMovieById","ID","fetchParams","fetchCast","fetchReviuw","fetchMoviesByName","query","searchParams","include_adult","BASE_URL","CAST_PATH_URL","GENRES_PATH_URL","TRENDINGS_PATH_URL","SEARCH_PATH_URL","BASE_IMAGE_URL","GET_MOVIE_DETAILS_PATH_URL","REVIEW_URL_PATH","Searchbar","handleSubmit","onSubmit","type","name","className","placeholder","List","styled","ListItem","Img","ImgLink","Link","SearchMovieList","isLoading","results","location","useLocation","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Boolean","map","original_title","id","poster_path","to","state","from","src","alt","StyledLink","useState","setResults","setIsLoading","totalPages","setTotalPages","useSearchParams","setSearchParams","get","useEffect","total_pages","p","toast","length","fetchData","position","event","preventDefault","target","elements","value","onClick","Number"],"sourceRoot":""}