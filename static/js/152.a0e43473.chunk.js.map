{"version":3,"file":"static/js/152.a0e43473.chunk.js","mappings":"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","sources":["components/ApiService.js","components/config.js","components/pages/movieID/Cast.styled.js","components/pages/movieID/Cast.js"],"sourcesContent":["import axios from 'axios';\nimport { urls, API_KEY } from './config';\n\n\n\n\n  export async function fetchGenres() {\n    const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n    try {\n      const response = await axios.get(url),\n        genres = response.data.genres;\n      return genres;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  export async function fetchTrendingMovies(page = 1) {\n    const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n      popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n    try {\n      const response = await axios.get(url, popularMoviesSearchParams);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n}\n  \n export async function fetchMovieById(ID) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchCast(ID) {\n   const url = `${urls.BASE_URL}movie/${ID}/credits`,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchReviuw(ID, page = 1) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID + urls.REVIEW_URL_PATH,\n     fetchParams = { params: { api_key: API_KEY, page: page } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \nexport async function fetchMoviesByName(query, page = 1) {\n    \n  const url = urls.BASE_URL + urls.SEARCH_PATH_URL,\n    searchParams = {\n      params: {\n        api_key: API_KEY,\n        page: page,\n        query: query,\n        include_adult: false,\n      },\n    };\n    const response = await axios.get(url, searchParams);\n    return response.data;\n  }\n\n\n\n// #moviesByNameSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//       query: '',\n//       page: 1,\n//       include_adult: false,\n//     },\n//   };\n\n//   #getMovieDetailsSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   get query() {\n//     return this.#moviesByNameSearchParams.params.query;\n//   }\n//   set query(newQuery) {\n//     this.#moviesByNameSearchParams.params.query = newQuery;\n//   }\n\n//   async fetchTrailer(id) {\n//     const url = `${urls.BASE_URL}${urls.GET_MOVIE_DETAILS_PATH_URL}${id}/videos?api_key=${API_KEY}`;\n//     try {\n//       const { data } = await axios.get(url);\n//       return data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getGenres () {\n//     const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n//     try {\n//       const response = await axios.get(url),\n//         genres = response.data.genres;\n//       return genres;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchTrendingMovies(page = 1) {\n//     const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n//       popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n//     try {\n//       const response = await axios.get(url, popularMoviesSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchMoviesByName() {\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     try {\n//       const response = await axios.get(url, this.#moviesByNameSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getMoviesByName(query, page = 1) {\n//     this.#moviesByNameSearchParams.params.query = query;\n//     this.#moviesByNameSearchParams.params.page = page;\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     const response = await axios.get(url, this.#moviesByNameSearchParams);\n//     return response.data;\n//   }\n\n//   async fetchMoviesByID(id) {\n//     const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + id;\n//     try {\n//       const response = await axios.get(url, this.#getMovieDetailsSearchParams);\n//       return response.data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   catch(error) {\n//     console.error(error);\n//   }","const urls = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  CAST_PATH_URL: '/credits',\n  GENRES_PATH_URL: 'genre/movie/list',\n  TRENDINGS_PATH_URL: 'trending/movie/day',\n  SEARCH_PATH_URL: 'search/movie',\n  BASE_IMAGE_URL: 'https://image.tmdb.org/t/p/w500',\n  GET_MOVIE_DETAILS_PATH_URL: 'movie/',\n  REVIEW_URL_PATH: '/reviews',\n};\n\nconst API_KEY = '4e55e991eb56041fecba3fbc73e3250b';\n\nconst NOTIFY_UNCORRECT_SEARCH =\n  'Search result is unsuccessful. Enter the correct movie name and try again!';\n\nexport { urls, API_KEY, NOTIFY_UNCORRECT_SEARCH };\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  width: 1200px;\n  margin: 0 auto;\n  padding: 15px;\n  list-style: none;\n  text-decoration: none;\n`;\n\nexport const ListItem = styled.li`\nwidth: calc((100% - 75px)/4)\n\n`;\n\nexport const Img = styled.img`\n  max-width: 100%;\n`;\n\n","import { useParams } from 'react-router-dom';\nimport { Circles } from 'react-loader-spinner';\nimport { useEffect, useRef, useState } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { fetchCast } from 'components/ApiService';\nimport { urls } from 'components/config';\nimport { List, ListItem, Img } from './Cast.styled';\n\n\n\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const { cast } = await fetchCast(movieId);\n        setCast(cast);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n        toast.error('Something went wrong :( Try reloading the page.');\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  if (!cast) {\n    return null;\n  }\n\n  return (\n    <div>\n      <List>\n        {cast.map(item => (\n          <ListItem key={item.id}>\n            {item.profile_path && (\n              <Img\n                src={urls.BASE_IMAGE_URL + item.profile_path}\n                alt={item.name}\n              />\n            )}\n            <p>{item.name}</p>\n            <p>Character: {item.character}</p>\n          </ListItem>\n        ))}\n      </List>\n      <Circles\n        height=\"100\"\n        width=\"100\"\n        color=\"#641cf4\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={Boolean(isLoading)}\n      />\n      <Toaster />\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["fetchTrendingMovies","page","url","urls","popularMoviesSearchParams","params","api_key","API_KEY","axios","response","data","console","error","fetchMovieById","ID","fetchParams","fetchCast","fetchReviuw","fetchMoviesByName","query","searchParams","include_adult","BASE_URL","CAST_PATH_URL","GENRES_PATH_URL","TRENDINGS_PATH_URL","SEARCH_PATH_URL","BASE_IMAGE_URL","GET_MOVIE_DETAILS_PATH_URL","REVIEW_URL_PATH","List","styled","ListItem","Img","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","isMounted","useRef","useEffect","toast","current","fetchData","map","item","profile_path","src","alt","name","character","id","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Boolean"],"sourceRoot":""}