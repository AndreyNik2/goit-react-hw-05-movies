{"version":3,"file":"static/js/103.d14fc3dc.chunk.js","mappings":"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","sources":["components/ApiService.js","components/config.js","components/pages/home/HomeMovieList.styled.js","components/pages/home/HomeMovieList.js","components/pages/home/Home.js"],"sourcesContent":["import axios from 'axios';\nimport { urls, API_KEY } from './config';\n\n\n\n\n  export async function fetchGenres() {\n    const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n    try {\n      const response = await axios.get(url),\n        genres = response.data.genres;\n      return genres;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  export async function fetchTrendingMovies(page = 1) {\n    const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n      popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n    try {\n      const response = await axios.get(url, popularMoviesSearchParams);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n}\n  \n export async function fetchMovieById(ID) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchCast(ID) {\n   const url = `${urls.BASE_URL}movie/${ID}/credits`,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchReviuw(ID, page = 1) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID + urls.REVIEW_URL_PATH,\n     fetchParams = { params: { api_key: API_KEY, page: page } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \nexport async function fetchMoviesByName(query, page = 1) {\n    \n  const url = urls.BASE_URL + urls.SEARCH_PATH_URL,\n    searchParams = {\n      params: {\n        api_key: API_KEY,\n        page: page,\n        query: query,\n        include_adult: false,\n      },\n    };\n    const response = await axios.get(url, searchParams);\n    return response.data;\n  }\n\n\n\n// #moviesByNameSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//       query: '',\n//       page: 1,\n//       include_adult: false,\n//     },\n//   };\n\n//   #getMovieDetailsSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   get query() {\n//     return this.#moviesByNameSearchParams.params.query;\n//   }\n//   set query(newQuery) {\n//     this.#moviesByNameSearchParams.params.query = newQuery;\n//   }\n\n//   async fetchTrailer(id) {\n//     const url = `${urls.BASE_URL}${urls.GET_MOVIE_DETAILS_PATH_URL}${id}/videos?api_key=${API_KEY}`;\n//     try {\n//       const { data } = await axios.get(url);\n//       return data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getGenres () {\n//     const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n//     try {\n//       const response = await axios.get(url),\n//         genres = response.data.genres;\n//       return genres;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchTrendingMovies(page = 1) {\n//     const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n//       popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n//     try {\n//       const response = await axios.get(url, popularMoviesSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchMoviesByName() {\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     try {\n//       const response = await axios.get(url, this.#moviesByNameSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getMoviesByName(query, page = 1) {\n//     this.#moviesByNameSearchParams.params.query = query;\n//     this.#moviesByNameSearchParams.params.page = page;\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     const response = await axios.get(url, this.#moviesByNameSearchParams);\n//     return response.data;\n//   }\n\n//   async fetchMoviesByID(id) {\n//     const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + id;\n//     try {\n//       const response = await axios.get(url, this.#getMovieDetailsSearchParams);\n//       return response.data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   catch(error) {\n//     console.error(error);\n//   }","const urls = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  CAST_PATH_URL: '/credits',\n  GENRES_PATH_URL: 'genre/movie/list',\n  TRENDINGS_PATH_URL: 'trending/movie/day',\n  SEARCH_PATH_URL: 'search/movie',\n  BASE_IMAGE_URL: 'https://image.tmdb.org/t/p/w500',\n  GET_MOVIE_DETAILS_PATH_URL: 'movie/',\n  REVIEW_URL_PATH: '/reviews',\n};\n\nconst API_KEY = '4e55e991eb56041fecba3fbc73e3250b';\n\nconst NOTIFY_UNCORRECT_SEARCH =\n  'Search result is unsuccessful. Enter the correct movie name and try again!';\n\nexport { urls, API_KEY, NOTIFY_UNCORRECT_SEARCH };\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n\nexport const List = styled.ul`\n  display: flex;\n  width: 1200px;\n  margin: 0 auto;\n  padding: 15px;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\nwidth: calc((100% - 60px)/3);\n`;\n\nexport const Img = styled.img`\nmax-width: 100%;\n &:hover{\n    scale: 1.05;\n }\n`;\n\nexport const ImgLink = styled(Link)`\ntext-decoration: none;\ncolor: #ffffff;\n`;","import { urls } from 'components/config';\nimport { useLocation } from 'react-router-dom';\nimport { Circles } from 'react-loader-spinner';\nimport { List, ListItem, Img, ImgLink } from './HomeMovieList.styled';\n\nconst HomeMovieList = ({ isLoading, trendingMovies, incrementPage }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        <Circles\n          height=\"100\"\n          width=\"100\"\n          color=\"#641cf4\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={Boolean(isLoading)}\n        />\n        {trendingMovies.map(({ original_title, id, poster_path }) => (\n          <ListItem key={id}>\n            <ImgLink to={`movies/${id}`} state={{ from: location }}>\n              {poster_path && (\n                <Img\n                  src={urls.BASE_IMAGE_URL + poster_path}\n                  alt={original_title}\n                />\n              )}\n              <h2 color=\"#fff\">{original_title}</h2>\n            </ImgLink>\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default HomeMovieList;\n","import { useEffect, useState, useRef } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { fetchTrendingMovies } from 'components/ApiService';\nimport HomeMovieList from 'components/pages/home/HomeMovieList'\n\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [page,setPage] = useState(1)\n  const isMounted = useRef(false);\n\n  const incrementPage = () => {\n    setPage(prevState => prevState + 1);\n  };\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const { results, total_results } = await fetchTrendingMovies();\n        setTrendingMovies(results);\n        setIsLoading(false);\n        if (total_results === 0 || !total_results) {\n          toast.error('Nothing found results trending movies :(');\n        }\n      } catch (error) {\n        console.error(error);\n        toast.error('Something went wrong :( Try reloading the page.');\n      }\n    }\n    fetchData();\n  }, [page]);\n\n  \n\n  return (\n    <main>\n      <Toaster position=\"top-right\" />\n      <HomeMovieList\n        isLoading={isLoading}\n        trendingMovies={trendingMovies}\n        incrementPage={incrementPage}\n      />\n    </main>\n  );\n};\n\n\nexport default Home;"],"names":["fetchTrendingMovies","page","url","urls","popularMoviesSearchParams","params","api_key","API_KEY","axios","response","data","console","error","fetchMovieById","ID","fetchParams","fetchCast","fetchReviuw","fetchMoviesByName","query","searchParams","include_adult","BASE_URL","CAST_PATH_URL","GENRES_PATH_URL","TRENDINGS_PATH_URL","SEARCH_PATH_URL","BASE_IMAGE_URL","GET_MOVIE_DETAILS_PATH_URL","REVIEW_URL_PATH","List","styled","ListItem","Img","ImgLink","Link","isLoading","trendingMovies","location","incrementPage","useLocation","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Boolean","map","original_title","id","poster_path","to","state","from","src","alt","useState","setTrendingMovies","setIsLoading","setPage","isMounted","useRef","useEffect","results","total_results","toast","current","fetchData","position","prevState"],"sourceRoot":""}