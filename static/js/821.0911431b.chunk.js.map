{"version":3,"file":"static/js/821.0911431b.chunk.js","mappings":"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","sources":["components/ApiService.js","components/config.js","components/pages/movieID/MovieId.styled.js","components/pages/movieID/MovieId.js"],"sourcesContent":["import axios from 'axios';\nimport { urls, API_KEY } from './config';\n\n\n\n\n  export async function fetchGenres() {\n    const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n    try {\n      const response = await axios.get(url),\n        genres = response.data.genres;\n      return genres;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  export async function fetchTrendingMovies(page = 1) {\n    const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n      popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n    try {\n      const response = await axios.get(url, popularMoviesSearchParams);\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n}\n  \n export async function fetchMovieById(ID) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchCast(ID) {\n   const url = `${urls.BASE_URL}movie/${ID}/credits`,\n     fetchParams = { params: { api_key: API_KEY } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \n export async function fetchReviuw(ID, page = 1) {\n   const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + ID + urls.REVIEW_URL_PATH,\n     fetchParams = { params: { api_key: API_KEY, page: page } };\n   try {\n     const response = await axios.get(url, fetchParams);\n     return response.data;\n   } catch (error) {\n     console.error(error);\n   }\n}\n \nexport async function fetchMoviesByName(query, page = 1) {\n    \n  const url = urls.BASE_URL + urls.SEARCH_PATH_URL,\n    searchParams = {\n      params: {\n        api_key: API_KEY,\n        page: page,\n        query: query,\n        include_adult: false,\n      },\n    };\n    const response = await axios.get(url, searchParams);\n    return response.data;\n  }\n\n\n\n// #moviesByNameSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//       query: '',\n//       page: 1,\n//       include_adult: false,\n//     },\n//   };\n\n//   #getMovieDetailsSearchParams = {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   };\n\n//   get query() {\n//     return this.#moviesByNameSearchParams.params.query;\n//   }\n//   set query(newQuery) {\n//     this.#moviesByNameSearchParams.params.query = newQuery;\n//   }\n\n//   async fetchTrailer(id) {\n//     const url = `${urls.BASE_URL}${urls.GET_MOVIE_DETAILS_PATH_URL}${id}/videos?api_key=${API_KEY}`;\n//     try {\n//       const { data } = await axios.get(url);\n//       return data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getGenres () {\n//     const url = `${urls.BASE_URL}${urls.GENRES_PATH_URL}?api_key=${API_KEY}&language=en-US`;\n//     try {\n//       const response = await axios.get(url),\n//         genres = response.data.genres;\n//       return genres;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchTrendingMovies(page = 1) {\n//     const url = urls.BASE_URL + urls.TRENDINGS_PATH_URL,\n//       popularMoviesSearchParams = { params: { api_key: API_KEY, page: page } };\n//     try {\n//       const response = await axios.get(url, popularMoviesSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async fetchMoviesByName() {\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     try {\n//       const response = await axios.get(url, this.#moviesByNameSearchParams);\n//       return response;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   async getMoviesByName(query, page = 1) {\n//     this.#moviesByNameSearchParams.params.query = query;\n//     this.#moviesByNameSearchParams.params.page = page;\n//     const url = urls.BASE_URL + urls.SEARCH_PATH_URL;\n//     const response = await axios.get(url, this.#moviesByNameSearchParams);\n//     return response.data;\n//   }\n\n//   async fetchMoviesByID(id) {\n//     const url = urls.BASE_URL + urls.GET_MOVIE_DETAILS_PATH_URL + id;\n//     try {\n//       const response = await axios.get(url, this.#getMovieDetailsSearchParams);\n//       return response.data;\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   }\n\n//   catch(error) {\n//     console.error(error);\n//   }","const urls = {\n  BASE_URL: 'https://api.themoviedb.org/3/',\n  CAST_PATH_URL: '/credits',\n  GENRES_PATH_URL: 'genre/movie/list',\n  TRENDINGS_PATH_URL: 'trending/movie/day',\n  SEARCH_PATH_URL: 'search/movie',\n  BASE_IMAGE_URL: 'https://image.tmdb.org/t/p/w500',\n  GET_MOVIE_DETAILS_PATH_URL: 'movie/',\n  REVIEW_URL_PATH: '/reviews',\n};\n\nconst API_KEY = '4e55e991eb56041fecba3fbc73e3250b';\n\nconst NOTIFY_UNCORRECT_SEARCH =\n  'Search result is unsuccessful. Enter the correct movie name and try again!';\n\nexport { urls, API_KEY, NOTIFY_UNCORRECT_SEARCH };\n","import styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: inline-block;\n  text-decoration: none;\n  color: #ffffff;\n  margin: 15px;\n  padding: 5px;\n  border: 1px solid #ffffff;\n  border-radius: 3px;\n`;\n\nexport const NLink = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n\n  :not(.active):hover {\n    border: 1px solid #ffffff;\n  }\n\n  &.active {\n    color: black;\n    background-color: white;\n  }\n`;\n","import { Circles } from 'react-loader-spinner';\nimport { Suspense, useEffect, useRef, useState } from 'react';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieById } from 'components/ApiService';\nimport { urls } from 'components/config';\nimport { StyledLink, NLink } from './MovieId.styled';\n\n\nconst MovieId = () => {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieDetails, setMovieDetails] = useState(null);\n  const isMounted = useRef(false);\n  const goBack = location.state?.from ?? \"/\";\n\n  useEffect(() => {\n    if (!isMounted.current) {\n      isMounted.current = true;\n      return;\n    }\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const response = await fetchMovieById(movieId);\n        setMovieDetails(response);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n        toast.error('Something went wrong :( Try reloading the page.');\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return null;\n  }\n\n\n\n  const {\n    genres,\n    original_title,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = movieDetails;\n  return (\n    <main>\n      <Circles\n        height=\"100\"\n        width=\"100\"\n        color=\"#641cf4\"\n        ariaLabel=\"circles-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={Boolean(isLoading)}\n      />\n      <StyledLink to={goBack}>Go back</StyledLink>\n      <div\n        style={{\n          width: '1200px',\n          margin: '0 auto',\n        }}\n      >\n        <div>\n          <img src={urls.BASE_IMAGE_URL + poster_path} alt={original_title} />\n        </div>\n        <div>\n          <h1>\n            {original_title} ({release_date.slice(0, 4)})\n          </h1>\n          <p>User score: {Math.round((vote_average / 10) * 100)}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres.map(genre => genre.name).join(', ')}</p>\n        </div>\n        <div>\n          <h4>Aditional informational</h4>\n          <NLink to=\"cast\" state={{ from: location.state?.from && '/' }}>\n            Cast\n          </NLink>\n          <NLink to=\"reviews\" state={{ rom: location.state?.from && '/' }}>\n            Reviews\n          </NLink>\n        </div>\n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </div>\n      <Toaster position=\"top-right\" />\n    </main>\n  );\n};\n\nexport default MovieId;\n"],"names":["fetchTrendingMovies","page","url","urls","popularMoviesSearchParams","params","api_key","API_KEY","axios","response","data","console","error","fetchMovieById","ID","fetchParams","fetchCast","fetchReviuw","fetchMoviesByName","query","searchParams","include_adult","BASE_URL","CAST_PATH_URL","GENRES_PATH_URL","TRENDINGS_PATH_URL","SEARCH_PATH_URL","BASE_IMAGE_URL","GET_MOVIE_DETAILS_PATH_URL","REVIEW_URL_PATH","StyledLink","styled","Link","NLink","NavLink","location","useLocation","movieId","useParams","useState","isLoading","setIsLoading","movieDetails","setMovieDetails","isMounted","useRef","goBack","state","from","useEffect","toast","current","fetchData","genres","original_title","overview","poster_path","release_date","vote_average","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","Boolean","to","style","margin","src","alt","slice","Math","round","map","genre","name","join","rom","Suspense","position"],"sourceRoot":""}